/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shazam;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;
import org.tritonus.sampled.convert.PCM2PCMConversionProvider;

/**
 *
 * @author Kata
 */
public class Media {

    private boolean runing;
    TargetDataLine line = null;
    ByteArrayOutputStream micRecord = null;
    ByteArrayOutputStream loadRecord = null;
    Matcher match = new Matcher();

    public void startrecordMic() {
        initMic();
        int d=1;
        micRecord = new ByteArrayOutputStream();
        boolean running = true;
        int n = 0;
        byte[] buffer = new byte[(int) 1024];

        while (running) {
            
            if (n > 1000) {
                break;
            }


            int count = line.read(buffer, 0, 1024);
            
            n++;
             if (count == 1024) {
                micRecord.write(buffer, 0, count);

            }
            if (count == 1024 && n % 4 == 0) {
                
                LoadFile fl = new LoadFile();
                fl.loadMic(micRecord.toByteArray(), match, d, true, "sadsad");
                d++;
                micRecord.reset();
            }

        }
       
    }

    LoadFile k = new LoadFile();

    public void stop() {
        runing = false;
        line.close();
        line.flush();
    }

    private void initMic() {
        try {

            final AudioFormat format = getAudioFormat();
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
            line = (TargetDataLine) AudioSystem.getLine(info);
            line.open(format);
            line.start();
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Media.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    AudioFormat getAudioFormat() {
        float sampleRate = 44100;
        int sampleSizeInBits = 8;
        int channels = 1; // mono
        boolean signed = true;
        boolean bigEndian = true;
        return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed,
                bigEndian);
    }

    File file = null;

    public String testPlay(String filename) {
        try {
            file = new File(filename);
            try (AudioInputStream in = AudioSystem.getAudioInputStream(file)) {
                AudioFormat baseFormat = in.getFormat();
                AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,
                        baseFormat.getSampleRate(),
                        16,
                        baseFormat.getChannels(),
                        baseFormat.getChannels() * 2,
                        baseFormat.getSampleRate(),
                        false);
                AudioInputStream din = AudioSystem.getAudioInputStream(decodedFormat, in);
                rawplay(decodedFormat, din);
            }
        } catch (Exception e) {
            
            return e.toString();
        }
        return "completed";
    }

    private void rawplay(AudioFormat targetFormat, AudioInputStream din) throws IOException, LineUnavailableException {
        byte[] data = new byte[1024];
        AudioInputStream outDin = new PCM2PCMConversionProvider().getAudioInputStream(getAudioFormat(), din);
        loadRecord = new ByteArrayOutputStream();
        int n = 0;
        int count = 0;
        int d=1;
        
        while (count != -1) {
           
            
            count = outDin.read(data, 0, 1024);
            n++;
            if (count == 1024) {
                loadRecord.write(data, 0, count);

            }
            if (count == 1024 && n % 4 == 0) {
                LoadFile fl = new LoadFile();
                fl.loadMic(loadRecord.toByteArray(), match, d, false,file.getName() );
                d++;
                loadRecord.reset();
            }

           

        }
 
        din.close();

    }
    public void commit()
    {
        match.db.commit();
    }
}
